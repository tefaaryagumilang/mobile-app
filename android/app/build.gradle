apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
*   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
  extraPackagerArgs: ["â€“max-old-space-size=4096"],
  entryFile: "index.js",
  enableHermes: false,  // clean and rebuild if changing
]

project.afterEvaluate {
        tasks.findAll { task ->
            task.name.startsWith('merge') && task.name.endsWith('Resources')
        }.each { t -> t.dependsOn "copyReleaseBundledJs" }
}

configurations {
    implementation {
        exclude group: 'com.android.support'
    }
}

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false
def jscFlavor = 'org.webkit:android-jsc:+'
/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * Production release flag
*/
def prodRelease = false
def prodEnv = System.getenv("PRODUCTION_BUILD")
if (prodEnv != null && "true".equals(prodEnv)) {
	prodRelease = true
	System.out.println("Production release")
} else {
	System.out.println("Not a Production release")
}

def enableHermes = project.ext.react.get("enableHermes", false);

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileOptions {
            sourceCompatibility 1.8
            targetCompatibility 1.8
        }

    defaultConfig {
      if (prodRelease == true) {
            applicationId System.getenv("APP_ID")
            versionCode new Integer(System.getenv("VERSION_CODE")).intValue()
            versionName System.getenv("VERSION_NAME")
      } else {
            applicationId "com.ubyapp"
            versionCode 1
            versionName VERSION_NUMBER+"."+System.getenv("BUILD_NUMBER")
      }
      System.out.println("Setting app id to " + applicationId)
      System.out.println("Setting version code to " + versionCode)
      System.out.println("Setting version name to " + versionName)

      minSdkVersion 19
      targetSdkVersion 31
      multiDexEnabled true
      ndk {
          abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
      }
      missingDimensionStrategy 'react-native-camera', 'general'
      vectorDrawables.useSupportLibrary = true
    }

    lintOptions {
        checkReleaseBuilds false
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        release {
			if (prodRelease == true) {
				storeFile file(System.getenv("KEYSTORE"))
				keyAlias System.getenv("ALIAS_KS")

			} else {
            	storeFile file(MYAPP_RELEASE_STORE_FILE)
            	keyAlias MYAPP_RELEASE_KEY_ALIAS
			}
			System.out.println("Using Keystore - "+ storeFile)

			storePassword System.getenv("KEY_STORE_PASSWORD")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
	    	signingConfig signingConfigs.release
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a":3, "x86_64":4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    packagingOptions {
        pickFirst '**/armeabi-v7a/libc++_shared.so'
        pickFirst '**/x86/libc++_shared.so'
        pickFirst '**/arm64-v8a/libc++_shared.so'
        pickFirst '**/x86_64/libc++_shared.so'
        pickFirst '**/x86/libjsc.so'
        pickFirst '**/armeabi-v7a/libjsc.so'
    }
}

repositories {
    flatDir {
        dirs project(':liveness').file('libs')
    }
}

dependencies {
    implementation project(':react-native-html-to-pdf')
    implementation project(":liveness")
    implementation project(":liveness_rn")
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    implementation project(':apiguard3-release')
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation "com.facebook.react:react-native:+"  // From node_modules
	if (prodRelease == false) {
		System.out.println("******************")
		System.out.println("Including TestFairy")
		System.out.println("******************")
        implementation 'com.testfairy:testfairy-android-sdk:1.+@aar'
	}
    if (enableHermes) {
      def hermesPath = "../../node_modules/hermesvm/android/";
      debugImplementation files(hermesPath + "hermes-debug.aar")
      releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
      implementation jscFlavor
    }
    implementation project(':lib-encrypt-android')
    implementation 'com.google.code.gson:gson:2.7'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.makeramen:roundedimageview:2.2.1'
    implementation 'eu.davidea:flipview:1.1.3'
    implementation 'com.google.android.gms:play-services-plus:16.0.0'
    implementation "com.google.android.gms:play-services-base:16.1.0"
    implementation 'com.google.android.gms:play-services-location:16.0.0'
    implementation 'com.google.android.gms:play-services-maps:16.0.0'
    implementation 'com.google.android.gms:play-services-analytics:16.0.6'
    implementation 'com.google.android.gms:play-services-auth:16.0.1'
    implementation 'com.google.firebase:firebase-core:17.0.0'
    implementation 'com.google.firebase:firebase-messaging:19.0.0'
    implementation 'com.google.firebase:firebase-analytics:16.3.0'

    implementation 'com.android.support:multidex:1.0.1'
    implementation (project(':react-native-camera')) {
        exclude group: "com.google.android.gms"
    }
    implementation ("com.google.android.gms:play-services-vision:17.0.2") {
    force = true;
    }
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0-rc01'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'androidx.annotation:annotation:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.exifinterface:exifinterface:1.0.0'
    implementation files('libs/adjust-lib.aar')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
